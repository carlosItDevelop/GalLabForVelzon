@using GeneralLabSolutions.Domain.Extensions.Helpers.Generics
@typeparam T where T : class

@if (PagedResult != null && PagedResult.List.Any())
{
    <div class="d-flex justify-content-center">
        <div class="me-2">
            Página @PagedResult.PageIndex de @PagedResult.TotalPages
        </div>

        <div class="btn-group" role="group" aria-label="Paginação">
            <button type="button" class="btn btn-outline-primary" @onclick="OnFirstPage" disabled="@(PagedResult.PageIndex == 1)">
                <i class="fas fa-angle-double-left"></i>
            </button>
            <button type="button" class="btn btn-outline-primary" @onclick="OnPreviousPage" disabled="@(!PagedResult.HasPrevious)">
                <i class="fas fa-angle-left"></i>
            </button>
            <button type="button" class="btn btn-outline-primary" @onclick="OnNextPage" disabled="@(!PagedResult.HasNext)">
                <i class="fas fa-angle-right"></i>
            </button>
            <button type="button" class="btn btn-outline-primary" @onclick="OnLastPage" disabled="@(PagedResult.PageIndex == PagedResult.TotalPages)">
                <i class="fas fa-angle-double-right"></i>
            </button>
        </div>
    </div>

    <div class="mt-3">
        @* Renderizar a lista usando RenderFragment *@
        @foreach (var item in PagedResult.List)
        {
            @ItemTemplate(item)
        }
    </div>
}
else
{
    <div class="d-flex justify-content-center">
        <div class="me-2">
            Nenhum registro encontrado.
        </div>
    </div>
}

@code {
    [Parameter] public PagedResult<T>? PagedResult { get; set; }
    [Parameter] public RenderFragment<T> ItemTemplate { get; set; } = default!;
    [Parameter] public EventCallback OnFirstPage { get; set; }
    [Parameter] public EventCallback OnPreviousPage { get; set; }
    [Parameter] public EventCallback OnNextPage { get; set; }
    [Parameter] public EventCallback OnLastPage { get; set; }

    private async Task HandleSearch(ChangeEventArgs e)
    {
        var searchTerm = e.Value?.ToString();
        // Chamar um método na página pai para recarregar os dados com o novo termo de pesquisa
        // Pode ser necessário outro EventCallback para isso
    }
}