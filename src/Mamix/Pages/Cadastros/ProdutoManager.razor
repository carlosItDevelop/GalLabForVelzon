@page "/produtomanager"

@using GeneralLabSolutions.Domain.Extensions.Helpers.Generics
@using Radzen
@using Radzen.Blazor
@using GeneralLabSolutions.WebAPI.DTOs
@using mamix.Services.Produtos
@inject IProdutoService _produtoService

<div class="my-4 page-header-breadcrumb d-flex align-items-center justify-content-between flex-wrap gap-2">
    <div>
        <h1 class="page-title fw-medium fs-18 mb-2">Produtos</h1>
        <nav>
            <ol class="breadcrumb mb-0">
                <li class="breadcrumb-item"><a href="javascript:void(0);">Cadastro</a></li>
                <li class="breadcrumb-item active" aria-current="page">Lista de produtos</li>
            </ol>
        </nav>
    </div>
</div>


<!-- Campo de pesquisa com debounce -->
<div class="row mb-3">
    <div class="col-md-4 d-flex">
        <input type="text"
               class="form-control me-2"
               placeholder="Pesquisar por descrição..."
               @oninput="HandleSearch" />
    </div>
</div>


<div class="row">
    <div class="col-xl-12">
        <div class="card custom-card">
            <div class="card-header">
                <div class="card-title">Lista de Produtos</div>
            </div>
            <div class="card-body">
                @if (pagedResult == null)
                {
                    <p>Carregando Produtos...</p>
                } else
                {
                    <RadzenDataGrid Data="@pagedResult.List" AllowColumnResize="true" ColumnWidth="200px">
                        <Columns>
                            <RadzenDataGridColumn Property="@nameof(ProdutoGridDto.Descricao)" Title="Descrição" />
                            <RadzenDataGridColumn Property="@nameof(ProdutoGridDto.Ncm)" Title="NCM" />
                            <RadzenDataGridColumn Property="@nameof(ProdutoGridDto.Codigo)" Title="Código" />
                            <RadzenDataGridColumn Property="@nameof(ProdutoGridDto.ValorUnitario)" Title="Valor Unitário" />
                            <RadzenDataGridColumn Property="@nameof(ProdutoGridDto.StatusDoProduto)" Title="Status do Produto" />
                            <RadzenDataGridColumn Property="@nameof(ProdutoGridDto.DataDeValidade)" Title="Validade" />
                        </Columns>
                    </RadzenDataGrid>

                    <!-- Controles de paginação -->
                    <div class="d-flex justify-content-end mt-3 gap-2">
                        <button class="btn btn-outline-primary" @onclick="FirstPage" disabled="@(pagedResult == null || pageIndex == 1)">Primeiro</button>
                        <button class="btn btn-outline-primary" @onclick="PreviousPage" disabled="@(pagedResult == null || !pagedResult.HasPrevious)">Anterior</button>
                        <button class="btn btn-outline-primary" @onclick="NextPage" disabled="@(pagedResult == null || !pagedResult.HasNext)">Próximo</button>
                        <button class="btn btn-outline-primary" @onclick="LastPage" disabled="@(pagedResult == null || pageIndex == pagedResult?.TotalPages)">Último</button>
                    </div>

                    <div class="mt-2">
                        Página @pagedResult?.PageIndex de @pagedResult?.TotalPages
                    </div>
                }
            </div>
        </div>
    </div>
</div>



@code {
    private PagedResult<ProdutoGridDto>? pagedResult;
    private int pageIndex = 1; // Página inicial
    private int pageSize = 8; // Tamanho da página
    private string? searchTerm; // Termo de busca
    private System.Timers.Timer? debounceTimer; // Timer para debounce

    protected override async Task OnInitializedAsync()
    {
        await CarregarProdutos(); // Carrega os produtos na inicialização
    }

    private async Task CarregarProdutos()
    {
        pagedResult = await _produtoService.ObterProdutosPaginadosAsync(pageIndex, pageSize, searchTerm);
        StateHasChanged(); // Força a atualização da interface
    }

    private void HandleSearch(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString(); // Atualiza o termo de busca

        // Reinicia o timer para debounce
        debounceTimer?.Stop();
        debounceTimer = new System.Timers.Timer(600); // Tempo de debounce (600ms)
        debounceTimer.Elapsed += async (s, args) =>
        {
            debounceTimer?.Stop(); // Para o timer após execução
            await InvokeAsync(async () =>
            {
                pageIndex = 1; // Sempre volta para a primeira página ao realizar nova busca
                await CarregarProdutos(); // Recarrega os produtos
            });
        };
        debounceTimer.Start();
    }

    private async Task FirstPage()
    {
        pageIndex = 1; // Vai para a primeira página
        await CarregarProdutos();
    }

    private async Task LastPage()
    {
        if (pagedResult != null)
        {
            pageIndex = pagedResult.TotalPages; // Vai para a última página
            await CarregarProdutos();
        }
    }

    private async Task PreviousPage()
    {
        if (pagedResult != null && pagedResult.HasPrevious)
        {
            pageIndex--; // Página anterior
            await CarregarProdutos();
        }
    }

    private async Task NextPage()
    {
        if (pagedResult != null && pagedResult.HasNext)
        {
            pageIndex++; // Próxima página
            await CarregarProdutos();
        }
    }
}
