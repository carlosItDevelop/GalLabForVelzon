@page "/tabela-pedidos"

@using System.Globalization
@* @inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager *@

<div class="my-4 page-header-breadcrumb d-flex align-items-center justify-content-between flex-wrap gap-2">
    <div>
        <h1 class="page-title fw-medium fs-18 mb-2">PEDIDOS</h1>
        <nav>
            <ol class="breadcrumb mb-0">
                <li class="breadcrumb-item"><a href="javascript:void(0);">Cadastro</a></li>
                <li class="breadcrumb-item active" aria-current="page">Lista de Pedidos</li>
            </ol>
        </nav>
    </div>
</div>

<!-- Campo de busca e dropdown na mesma linha -->
<div class="row mb-3">
    <div class="col-md-12 d-flex align-items-center">
        <!-- Campo de busca -->
        <input type="text"
               class="form-control me-2"
               placeholder="Pesquisar por cliente..."
               @oninput="BuscarClientes"
               style="max-width: 70%;" />

        <!-- Dropdown para quantidade de registros -->
        <select class="form-select"
                style="max-width: 30%;"
                @onchange="AlterarQuantidadePorPagina">
            <option value="5" selected>5</option>
            <option value="10">10</option>
            <option value="20">20</option>
            <option value="30">30</option>
        </select>
    </div>
</div>

<div class="row">
    <div class="col-xl-12">
        <div class="card custom-card">
            <div class="card-header">
                <div class="card-title">
                    Lista de Pedidos
                </div>
            </div>
            <div class="card-body">

                @if (Pedidos == null)
                {
                    <p>Carregando Pedidos...</p>
                }
                else
                {
                    <table class="table table-bordered table-hover">
                        <thead>
                            <tr>
                                <th @onclick="() => OrdenarPor(nameof(Pedido.Id))" style="cursor: pointer;">
                                    Id @(CurrentSortColumn == "Id" ? (IsSortAscending ? "▲" : "▼") : "")
                                </th>
                                <th @onclick="() => OrdenarPor(nameof(Pedido.Cliente))" style="cursor: pointer;">
                                    Cliente @(CurrentSortColumn == "Cliente" ? (IsSortAscending ? "▲" : "▼") : "")
                                </th>
                                <th @onclick="() => OrdenarPor(nameof(Pedido.Data))" style="cursor: pointer;">
                                    Data @(CurrentSortColumn == "Data" ? (IsSortAscending ? "▲" : "▼") : "")
                                </th>
                                <th @onclick="() => OrdenarPor(nameof(Pedido.Valor))" style="cursor: pointer;">
                                    Valor @(CurrentSortColumn == "Valor" ? (IsSortAscending ? "▲" : "▼") : "")
                                </th>
                                <th @onclick="() => OrdenarPor(nameof(Pedido.Status))" style="cursor: pointer;">
                                    Status @(CurrentSortColumn == "Status" ? (IsSortAscending ? "▲" : "▼") : "")
                                </th>
                                <th>AÇÃO</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var pedido in PaginatedPedidos)
                            {
                                <tr>
                                    <td>@pedido.Id</td>
                                    <td>@pedido.Cliente</td>
                                    <td>@pedido.Data.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</td>
                                    <td>@pedido.Valor.ToString("C2", CultureInfo.InvariantCulture)</td>
                                    <td>@pedido.Status</td>
                                    <td>
                                        <button class="btn btn-outline-success btn-sm" title="Detalhes do Pedido" @onclick="@(async () => await DetalheDoPedido(pedido))">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        <button class="btn btn-outline-primary btn-sm" title="Editar Pedido" @onclick="@(async () => await EditarPedido(pedido))">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-primary btn-sm" id="three-buttons" title="Excluir Pedido" @onclick="@(async () => await ExcluirPedido(pedido))">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>

<div class="mt-2">
    <button @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)" class="btn btn-outline-primary">Anterior</button>
    &nbsp;&nbsp;<span>Página @CurrentPage de @TotalPages</span>&nbsp;&nbsp;
    <button @onclick="NextPage" disabled="@(!CanGoToNextPage)" class="btn btn-outline-primary">Próxima</button>
</div>

@code {
    private List<Pedido> Pedidos = new();
    private List<Pedido> PaginatedPedidos = new();

    private int CurrentPage = 1;
    private int PageSize = 5;
    private int TotalPages => (int)Math.Ceiling((double)PedidosFiltrados.Count / PageSize);

    private bool CanGoToPreviousPage => CurrentPage > 1;
    private bool CanGoToNextPage => CurrentPage < TotalPages;

    private string CurrentSortColumn = "Id";
    private bool IsSortAscending = true;

    private List<Pedido> PedidosFiltrados = new();
    private string Busca = string.Empty;
    private System.Timers.Timer DebounceTimer;

    protected override void OnInitialized()
    {
        Pedidos = GerarPedidosFake();
        AtualizarFiltro();
    }


    private void AtualizarFiltro()
    {
        if (string.IsNullOrEmpty(Busca))
        {
            PedidosFiltrados = Pedidos;
        }
        else
        {
            PedidosFiltrados = Pedidos
                .Where(p =>
                    (!string.IsNullOrEmpty(p.Cliente) && p.Cliente.Contains(Busca, StringComparison.OrdinalIgnoreCase)) ||
                    (!string.IsNullOrEmpty(p.Id.ToString()) && p.Id.ToString().Contains(Busca, StringComparison.OrdinalIgnoreCase)) ||
                    (!string.IsNullOrEmpty(p.Valor.ToString()) && p.Valor.ToString().Contains(Busca, StringComparison.OrdinalIgnoreCase))
                )
                .ToList();
        }

        // Ordenar após filtrar
        PedidosFiltrados = IsSortAscending
            ? PedidosFiltrados.OrderBy(p => GetPropertyValue(p, CurrentSortColumn)).ToList()
            : PedidosFiltrados.OrderByDescending(p => GetPropertyValue(p, CurrentSortColumn)).ToList();

        AtualizarPagina();
    }


    private void AtualizarPagina()
    {
        PaginatedPedidos = PedidosFiltrados
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }

    private void OrdenarPor(string coluna)
    {
        if (CurrentSortColumn == coluna)
        {
            IsSortAscending = !IsSortAscending;
        }
        else
        {
            CurrentSortColumn = coluna;
            IsSortAscending = true;
        }

        PedidosFiltrados = IsSortAscending
            ? PedidosFiltrados.OrderBy(p => GetPropertyValue(p, coluna)).ToList()
            : PedidosFiltrados.OrderByDescending(p => GetPropertyValue(p, coluna)).ToList();

        AtualizarPagina();
    }

    private object GetPropertyValue(Pedido pedido, string propertyName)
    {
        return typeof(Pedido).GetProperty(propertyName)?.GetValue(pedido, null) ?? string.Empty;
    }

    private void PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            CurrentPage--;
            AtualizarPagina();
        }
    }

    private void NextPage()
    {
        if (CanGoToNextPage)
        {
            CurrentPage++;
            AtualizarPagina();
        }
    }

    private void BuscarClientes(ChangeEventArgs e)
    {
        Busca = e.Value.ToString();

        DebounceTimer?.Stop();
        DebounceTimer = new System.Timers.Timer(1000) { AutoReset = false };
        DebounceTimer.Elapsed += (s, _) =>
        {
            InvokeAsync(() =>
            {
                AtualizarFiltro();
                StateHasChanged();
            });
        };
        DebounceTimer.Start();
    }

    private void AlterarQuantidadePorPagina(ChangeEventArgs e)
    {
        PageSize = int.Parse(e.Value.ToString());
        CurrentPage = 1;
        AtualizarPagina();
    }

    private List<Pedido> GerarPedidosFake()
    {
        var pedidos = new List<Pedido>();
        var random = new Random();
        string[] statusOptions = { "Pendente", "Aprovado", "Cancelado", "Concluído" };

        for (int i = 1; i <= 20; i++)
        {
            pedidos.Add(new Pedido
                {
                    Id = 755+i,
                    Cliente = $"Cliente {i}",
                    Data = DateTime.Now.AddDays(-random.Next(0, 30)),
                    Valor = random.Next(100, 1000),
                    Status = statusOptions[random.Next(statusOptions.Length)]
                });
        }

        return pedidos;
    }

    private async Task DetalheDoPedido(Pedido pedido)
    {
        Console.WriteLine($"\n\t\tDetalhes do Pedido Nº: {pedido.Id}");
        await Task.CompletedTask;
    }

    private async Task EditarPedido(Pedido pedido)
    {
        Console.WriteLine($"\t\tEditando Pedido Nº: {pedido.Id}");
        await Task.CompletedTask;
    }

    private async Task ExcluirPedido(Pedido pedido)
    {
        Console.WriteLine($"\t\tExcluindo Pedido Nº: {pedido.Id}");
        await Task.CompletedTask;
    }

    public class Pedido
    {
        public int Id { get; set; }
        public string? Cliente { get; set; }
        public DateTime Data { get; set; }
        public decimal Valor { get; set; }
        public string? Status { get; set; }
    }
}
